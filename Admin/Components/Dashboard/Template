import React,{useState,useEffect} from 'react'
import { View,FlatList, ActivityIndicator } from 'react-native'
import { Container, Header,  List, Item, Input, Icon, Button, ListItem, Left, Body, Right, Thumbnail, Text } from 'native-base';
import axios from 'axios'
import _ from 'lodash'

const Home = () => {
    const [data,setData] = useState([]);
    const [fullData,setfullData] = useState([]);
    const [loading,setLoading] = useState(false);
    const [error,setError] = useState(null);
    const [query,setQuery] = useState('')
    useEffect(() => {
        requestAPIPhotos();
        return () => {
            
        }
    }, [])

    const requestAPIPhotos = _.debounce(() => {
        setLoading(true);
        const apiURL = "https://jsonplaceholder.typicode.com/photos";
        axios({
            method : 'GET',
            url : apiURL
        })
        .then(response => {
            setLoading(false)
            setData(response.data)
            setfullData(response.data)
        })
        .catch(error => {
            setError(error)
            setLoading(false)
        })
    },5000);

    const _renderItem = ({item,index }) => {
        return (
            <ListItem avatar>
                <Left>
                    <Thumbnail source={{ uri: item.thumbnailUrl }} />
                </Left>
                <Body>
                    <Text>{item.title}</Text>
                </Body>
            </ListItem>
        )
    }

    const renderFooter = () => {
        if(!loading){
            return null 
        }
        return (
            <View style = {{paddingVertical :20,borderTopWidth : 1,borderColor : 'black'}}>
                <ActivityIndicator animating size = "large"/>
            </View>
        )
    }

    const handleSearch = (text) => {
        const formattedQuery = text.toLowerCase()
        const data = _.filter(fullData,photo => {
            if(photo.title.includes(formattedQuery)){
                return true
            }
            return false
        })
        setData(data)
        setQuery(text)
    }
    return (
        <Container>
            <Header searchBar rounded>
                <Item>
                    <Icon name="ios-search" />
                    <Input placeholder="Search" onChangeText = {handleSearch}/>
                </Item>
            </Header>
            <List>
                <FlatList
                    data = {data}
                    renderItem = {_renderItem}
                    keyExtractor = {(item,index) => index.toString()}
                    ListFooterComponent = {renderFooter}
                />
            </List>
        </Container>
    )
}

export default Home