const Sales = require('../Models/sales')

exports.add_sales = (req,res) => {
    // let date_invoice = req.body.date_order;
    // Sales.find({
    //     date_order : date_invoice

    // })
    // .then(response => {
    //     if(response.length){
    //         const order = response[0].order;
    //         order.push(req.body.order);
    //         Sales.updateOne({date_order : date_invoice},{
    //             date_order : date_invoice,
    //             order : order
    //         },{new: true})
    //         .then(response => {
    //             res.json(response)
    //         })
    //         .catch(error => {
    //             res.json(error)
    //         })
    //     }else{
    //         Sales.create({
    //             date_order : req.body.date_order,
    //             order : req.body.order
    //         })
    //         .then(response => {
    //             res.json(response)
    //         })
    //         .catch(error => {
    //             res.json(error)
    //         })
    //     }
    // })
    // .catch(error => {   
    //     res.json(error);
    // })
    Sales.create({
        date_order : req.body.date_order,
        order : req.body.order
    })
    .then(response => {
        res.json(response)
    })
    .catch(error => {
        res.json(error)
    })

}

exports.show_sales = (req,res) => {
    var type = req.params.type;
    var start = new Date();
    start.setHours(0,0,0,0);
    
    var end = new Date();
    end.setHours(23,59,59,999);
    
    if(type === "daily"){
        Sales.find({
            date_order : {
                $gte: start, $lt: end
            }
        })
        .sort({date_order : -1})
        .then(response => {
            res.json(response)
        })
        .catch(error => {
            res.json(error)
        })
    }else if(type === "weekly"){
        var d = new Date();
        d.setDate(d.getDate()-7);
        
        Sales.aggregate([
            {$match : {"date_order" : {$gt : d}}},
            {$group : {_id : "$date_order", list_order : {
                $push : {
                    order : "$order"
                }
            }}},
            {$group : {
                _id : "$_id",
                list_order_week : {
                    $push : {
                        order : "$list_order"
                    }
                }
            }}
        ])
        .then(response => {
            res.json(response)
        })
        .catch(error => {
            res.json(error)
        })
    }else if(type === "monthly"){
        Sales.find({
            date: {
                $gte: new Date(new Date() - 30 * 60 * 60 * 24 * 1000)
            }
        })
        .sort({date : -1})
        .then(response => {
            res.json(response)
        })
        .catch(error => {
            res.json(error)
        })
    }
}